Challenge 2
Section 0
1.	Learning OO design should help you to think through what you’re doing and how you want to do something before you actually start coding so that you will not get stuck or make the same mistake over and over again.

2.	It will help you know what you want to build and how you want to build it before you start building coding and could potentially save you from making lots of mistakes that might occur if you just start coding without thinking about what you’re doing.

3.	A “waterfall” approach is a strict linear plan with several distinct steps that you would complete and then move onto the next step.  “Agile” development includes several different cycles of analysis, design, and programming.  It helps you to keep changing and updating your product to make it better and to meet the changing needs of your client .  An iteration is one cycle within agile development.  We use them to get better and better products and we work out bugs and figure out what the product should look like.

Section 1
1.	There are procedural languages, which are used on things like mainframes and for operating systems.  Logic languages and functional languages are more popular for the academic world and computational linguistics.  Object-oriented languages are used for desktop applications, gaming applications, mobile applications, etc.

2.	An object has identity, attributes, and behavior.  An identity is something that defines an object and differentiates it from another object, like a name.  Attributes are things like the data that an object is holding.  Behavior is what the object can do, like the methods it can perform.

3.	A class is like a blueprint because it describes what a class will be but it isn’t actually the object.  You can use the same class to create multiple objects.  An object inherits its attributes and  behavior from a class.  The analogy breaks down in that the blueprint usually is the same as the house you create with is, but the objects created from a class are almost always different in some or many ways from the class, with additional attributes or behaviors added.

4.	They are describing the essential qualities of something instead of a the inessential qualities of a specific thing.

5.	It prevents people from accessing information or data and changing it when they do not need to access and change it.  It enables the developer to control what information the user can or cannot access.

6.	An inheritance relationship occurs when you create a new object from a class and then the object “inherits” the attributes and behaviors from the class it was created from.  It would be advantageous when you are creating multiple objects that share attributes and behaviors.  Instead of creating every new object and then defining all the attributes and behaviors, you could instead create a new class that has those qualities and then create new objects that inherit from it.

7.	Polymorphism means that attributes and behaviors can be changed when it is useful to do so, even if the thing is inherited from a class.  It allows us to create objects that are specialized for what we want to do while still using classes and inheritance.


Section 2
1.	These steps allow the developer to plan their app and create a plan before they start spending time writing code, helping them to see potential problems before they are a problem.
a.	gather requirements
b.	describe the app
c.	identity the main objects
d.	describe the interactions
e.	create a class diagram

2.	You should have a list of the things that your application must do, the functional requirements. And you should have a list of non-functional requirements like usability, reliability, performance, supportability, design, implementation, interface, and physical requirements.  

3.	It is a modeling language that lets you sketch out your ideas on paper before you start coding them.

Section 3
1.	The goal is “Create new event on calendar”
a.	The actor is the phone user.
b.	The scenario is: the user opens the application on their phone and the calendar pops up.  The user scrolls to and selects the date they want to create an event on.  They fill out the description, place, time, and other people to invite by email to that event.  They save the event.

2.	You could have a weather application in which one of the actors is the external data source that the app pulls weather information from.

3.	Scenario:  The user opens the application.  The user scrolls to and selects the date and time they want to create event.  They fill out the description, place, time, and other people to invite to that event.  They save the event.
a.	Extension:  The time slot is already filled.
i.	customer deletes the event and creates a new one
ii.	customer keeps the event and chooses another date and/or time

4.	They all have user with arrows going to the things that they might want to do and then what other actors have to be involved to make that happen.

5.	As a user I want GPS tracking so that I can get accurate directions to places.
a.	As a user I want address searches so I can find places.
b.	As a user I want street view so I can see what I’m looking for.
c.	As a user I want accurate distances between locations so I can get to places on time.
d.	As a user I want real-time traffic updates so that I can avoid bad traffic.

Section 4
1.	
2.	User, calendar, date, event, email

3.	User uses the calendar.  Calendar stores the dates, which store events.  The user creates events.  Email lets other users know about events.


4.	The user uses the calendar.  Calendar stores dates.  Dates store events.  Events store email.  Email notifies user.  User creates events.

Section 5
1.

User

-name:String=”Name”
-email:String=”email”
-address:String=”address

+getName():String
+getEmail():String +getAddress():String

Calendar

-calendar:TableView= “Calendar”

+displayDate()

Date

-date:NSdate = “date”

+enterDate():String

Event

-name:String= “Name”
-time:NSDate = “time”
-invitedPeople:Object=”people”

+createEvent():String
+setTime()NSDate
+invitePeople()Object:

Email

-email:String=”email”

+sendEmail()
+getEmail()

Attributes.  I think it’s easier to figure out what a thing should contain then what exactly it should do.

2.	Objective C kind of breaks up the attributes and behaviors already between the interface and implementation files.  So you will always think of the two as separate things in objective-c.

3.	The contructor in objective C you say:
a.	Class *objectName = [[Class alloc] init];
i.	You use it to create a new object
b.	The destructor in objective C is done automatically and is used to release things from memory.  It is used to reduce the memory an app uses.

4.	The exchange rate for currency would be the same across multiple objects.
a.	The date would be static across objects
b.	A GPS location would be the same across multiple objects.

Section 6
1.	Inheritance refers to when a class is created from another class and then has all the methods and attributes of that class.  It is useful because it allows us to create new classes that contain things from other classes instead of just starting every new class from scratch.  It saves a lot of time.

2.	On my linkedIn app, there is probably a class of users, then there are people I am connected to by 1, 2, and 3 degrees.  All of these people are users but they also have other attributes that they inherited from the superclass of user.
a.	When I get a call, if its a random number it will just show the number, but if it is a contact, it will show their face and say their name.  The contact is a person with a number but since the number is part of the class “contacts” it recognizes it and calls the method, display photo and name, when I get a call from them.
b.	On my Kindle app, there is probably a class of books, then one of purchased books, then books on my device, then the individual book objects.  Each subclass inherits from books, and then keeps going down to the individual books.
	